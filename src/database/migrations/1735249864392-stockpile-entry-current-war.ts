import { MigrationInterface, QueryRunner } from "typeorm";

export class StockpileEntryCurrentWar1735249864392 implements MigrationInterface {
    name = 'StockpileEntryCurrentWar1735249864392'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "app"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","stockpile_diff","app"]);
        await queryRunner.query(`DROP VIEW "app"."stockpile_diff"`);
        await queryRunner.query(`DELETE FROM "app"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","stockpile_entry_current","app"]);
        await queryRunner.query(`DROP VIEW "app"."stockpile_entry_current"`);
        await queryRunner.query(`CREATE VIEW "app"."stockpile_diff" AS 
    SELECT
      entry1.id current_entry_id,
      entry2.id previous_entry_id,
      history.current_log_id,
      history.previous_log_id,
      history.stockpile_id,
      entry1.catalog_id,
      entry1.guild_id,
      entry1.war_number,
      entry1.quantity_crated,
      entry1.quantity_shippable,
      entry1.quantity_uncrated,
      history.created_at,
      entry1.created_by_sf,
      history.since_previous,
      COALESCE(entry1.quantity_crated - entry2.quantity_crated, entry1.quantity_crated) as diff_crated,
      COALESCE(entry1.quantity_shippable - entry2.quantity_shippable, entry1.quantity_shippable) as diff_shippable,
      COALESCE(entry1.quantity_uncrated - entry2.quantity_uncrated, entry1.quantity_uncrated) as diff_uncrated
    FROM
      (
        SELECT
          h1.stockpile_id stockpile_id,
          h1.log_id current_log_id,
          h2.log_id previous_log_id,
          h1.created_at created_at,
          COALESCE(h1.created_at - h2.created_at, '0'::interval) since_previous
        FROM app.stockpile_log_history h1,
        LATERAL (
          SELECT *
          FROM app.stockpile_log_history hh2
          WHERE hh2.rank=h1.rank+1 AND hh2.stockpile_id=h1.stockpile_id
        ) h2
      ) history
    LEFT JOIN app.stockpile_entry entry1 
      ON entry1.log_id=history.current_log_id 
      AND entry1.stockpile_id=history.stockpile_id
    LEFT JOIN app.stockpile_entry entry2 
      ON entry2.log_id=history.previous_log_id 
      AND entry1.catalog_id=entry2.catalog_id 
      AND entry1.stockpile_id=entry2.stockpile_id
  `);
        await queryRunner.query(`INSERT INTO "app"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["app","VIEW","stockpile_diff","SELECT\n      entry1.id current_entry_id,\n      entry2.id previous_entry_id,\n      history.current_log_id,\n      history.previous_log_id,\n      history.stockpile_id,\n      entry1.catalog_id,\n      entry1.guild_id,\n      entry1.war_number,\n      entry1.quantity_crated,\n      entry1.quantity_shippable,\n      entry1.quantity_uncrated,\n      history.created_at,\n      entry1.created_by_sf,\n      history.since_previous,\n      COALESCE(entry1.quantity_crated - entry2.quantity_crated, entry1.quantity_crated) as diff_crated,\n      COALESCE(entry1.quantity_shippable - entry2.quantity_shippable, entry1.quantity_shippable) as diff_shippable,\n      COALESCE(entry1.quantity_uncrated - entry2.quantity_uncrated, entry1.quantity_uncrated) as diff_uncrated\n    FROM\n      (\n        SELECT\n          h1.stockpile_id stockpile_id,\n          h1.log_id current_log_id,\n          h2.log_id previous_log_id,\n          h1.created_at created_at,\n          COALESCE(h1.created_at - h2.created_at, '0'::interval) since_previous\n        FROM app.stockpile_log_history h1,\n        LATERAL (\n          SELECT *\n          FROM app.stockpile_log_history hh2\n          WHERE hh2.rank=h1.rank+1 AND hh2.stockpile_id=h1.stockpile_id\n        ) h2\n      ) history\n    LEFT JOIN app.stockpile_entry entry1 \n      ON entry1.log_id=history.current_log_id \n      AND entry1.stockpile_id=history.stockpile_id\n    LEFT JOIN app.stockpile_entry entry2 \n      ON entry2.log_id=history.previous_log_id \n      AND entry1.catalog_id=entry2.catalog_id \n      AND entry1.stockpile_id=entry2.stockpile_id"]);
        await queryRunner.query(`CREATE VIEW "app"."stockpile_entry_current" AS SELECT DISTINCT ON ("entry"."stockpile_id", "entry"."catalog_id") "l"."id" AS "l_id", "l"."crew_channel_sf" AS "l_crew_channel_sf", "l"."location_id" AS "l_location_id", "l"."war_number" AS "l_war_number", "l"."guild_id" AS "l_guild_id", "l"."message" AS "l_message", "l"."raw" AS "l_raw", "l"."processed_at" AS "l_processed_at", "l"."created_by_sf" AS "l_created_by_sf", "l"."created_at" AS "l_created_at", "l"."deleted_by_sf" AS "l_deleted_by_sf", "l"."deleted_at" AS "l_deleted_at", "c"."id" AS "c_id", "c"."foxhole_version" AS "c_foxhole_version", "c"."catalog_version" AS "c_catalog_version", "c"."code_name" AS "c_code_name", "c"."slang" AS "c_slang", "c"."display_name" AS "c_display_name", "c"."faction" AS "c_faction", "c"."category" AS "c_category", "c"."crate_quantity" AS "c_crate_quantity", "c"."shippable_quantity" AS "c_shippable_quantity", "c"."crate_stockpile_maximum" AS "c_crate_stockpile_maximum", "c"."shippable_stockpile_maximum" AS "c_shippable_stockpile_maximum", "c"."data" AS "c_data", "c"."created_at" AS "c_created_at", entry.* FROM "app"."stockpile_entry" "entry" LEFT JOIN "app"."stockpile_log" "l" ON "l"."id"="entry"."log_id"  LEFT JOIN "app"."catalog_expanded" "c" ON "c"."id"="entry"."catalog_id"  INNER JOIN (SELECT war_number FROM "app"."war" "war" ORDER BY "war"."war_number" DESC LIMIT 1) "w" ON w.war_number="entry"."war_number" WHERE "l"."deleted_at" IS NULL ORDER BY "entry"."stockpile_id" ASC, "entry"."catalog_id" ASC, "entry"."created_at" DESC`);
        await queryRunner.query(`INSERT INTO "app"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["app","VIEW","stockpile_entry_current","SELECT DISTINCT ON (\"entry\".\"stockpile_id\", \"entry\".\"catalog_id\") \"l\".\"id\" AS \"l_id\", \"l\".\"crew_channel_sf\" AS \"l_crew_channel_sf\", \"l\".\"location_id\" AS \"l_location_id\", \"l\".\"war_number\" AS \"l_war_number\", \"l\".\"guild_id\" AS \"l_guild_id\", \"l\".\"message\" AS \"l_message\", \"l\".\"raw\" AS \"l_raw\", \"l\".\"processed_at\" AS \"l_processed_at\", \"l\".\"created_by_sf\" AS \"l_created_by_sf\", \"l\".\"created_at\" AS \"l_created_at\", \"l\".\"deleted_by_sf\" AS \"l_deleted_by_sf\", \"l\".\"deleted_at\" AS \"l_deleted_at\", \"c\".\"id\" AS \"c_id\", \"c\".\"foxhole_version\" AS \"c_foxhole_version\", \"c\".\"catalog_version\" AS \"c_catalog_version\", \"c\".\"code_name\" AS \"c_code_name\", \"c\".\"slang\" AS \"c_slang\", \"c\".\"display_name\" AS \"c_display_name\", \"c\".\"faction\" AS \"c_faction\", \"c\".\"category\" AS \"c_category\", \"c\".\"crate_quantity\" AS \"c_crate_quantity\", \"c\".\"shippable_quantity\" AS \"c_shippable_quantity\", \"c\".\"crate_stockpile_maximum\" AS \"c_crate_stockpile_maximum\", \"c\".\"shippable_stockpile_maximum\" AS \"c_shippable_stockpile_maximum\", \"c\".\"data\" AS \"c_data\", \"c\".\"created_at\" AS \"c_created_at\", entry.* FROM \"app\".\"stockpile_entry\" \"entry\" LEFT JOIN \"app\".\"stockpile_log\" \"l\" ON \"l\".\"id\"=\"entry\".\"log_id\"  LEFT JOIN \"app\".\"catalog_expanded\" \"c\" ON \"c\".\"id\"=\"entry\".\"catalog_id\"  INNER JOIN (SELECT war_number FROM \"app\".\"war\" \"war\" ORDER BY \"war\".\"war_number\" DESC LIMIT 1) \"w\" ON w.war_number=\"entry\".\"war_number\" WHERE \"l\".\"deleted_at\" IS NULL ORDER BY \"entry\".\"stockpile_id\" ASC, \"entry\".\"catalog_id\" ASC, \"entry\".\"created_at\" DESC"]);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DELETE FROM "app"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","stockpile_entry_current","app"]);
        await queryRunner.query(`DROP VIEW "app"."stockpile_entry_current"`);
        await queryRunner.query(`DELETE FROM "app"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`, ["VIEW","stockpile_diff","app"]);
        await queryRunner.query(`DROP VIEW "app"."stockpile_diff"`);
        await queryRunner.query(`CREATE VIEW "app"."stockpile_entry_current" AS SELECT DISTINCT ON ("entry"."stockpile_id", "entry"."catalog_id") "l"."id" AS "l_id", "l"."crew_channel_sf" AS "l_crew_channel_sf", "l"."location_id" AS "l_location_id", "l"."war_number" AS "l_war_number", "l"."guild_id" AS "l_guild_id", "l"."message" AS "l_message", "l"."raw" AS "l_raw", "l"."processed_at" AS "l_processed_at", "l"."created_by_sf" AS "l_created_by_sf", "l"."created_at" AS "l_created_at", "l"."deleted_by_sf" AS "l_deleted_by_sf", "l"."deleted_at" AS "l_deleted_at", "c"."id" AS "c_id", "c"."foxhole_version" AS "c_foxhole_version", "c"."catalog_version" AS "c_catalog_version", "c"."code_name" AS "c_code_name", "c"."slang" AS "c_slang", "c"."display_name" AS "c_display_name", "c"."faction" AS "c_faction", "c"."category" AS "c_category", "c"."crate_quantity" AS "c_crate_quantity", "c"."shippable_quantity" AS "c_shippable_quantity", "c"."crate_stockpile_maximum" AS "c_crate_stockpile_maximum", "c"."shippable_stockpile_maximum" AS "c_shippable_stockpile_maximum", "c"."data" AS "c_data", "c"."created_at" AS "c_created_at", entry.* FROM "app"."stockpile_entry" "entry" LEFT JOIN "app"."stockpile_log" "l" ON "l"."id"="entry"."log_id"  LEFT JOIN "app"."catalog_expanded" "c" ON "c"."id"="entry"."catalog_id" WHERE "l"."deleted_at" IS NULL ORDER BY "entry"."stockpile_id" ASC, "entry"."catalog_id" ASC, "entry"."created_at" DESC`);
        await queryRunner.query(`INSERT INTO "app"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["app","VIEW","stockpile_entry_current","SELECT DISTINCT ON (\"entry\".\"stockpile_id\", \"entry\".\"catalog_id\") \"l\".\"id\" AS \"l_id\", \"l\".\"crew_channel_sf\" AS \"l_crew_channel_sf\", \"l\".\"location_id\" AS \"l_location_id\", \"l\".\"war_number\" AS \"l_war_number\", \"l\".\"guild_id\" AS \"l_guild_id\", \"l\".\"message\" AS \"l_message\", \"l\".\"raw\" AS \"l_raw\", \"l\".\"processed_at\" AS \"l_processed_at\", \"l\".\"created_by_sf\" AS \"l_created_by_sf\", \"l\".\"created_at\" AS \"l_created_at\", \"l\".\"deleted_by_sf\" AS \"l_deleted_by_sf\", \"l\".\"deleted_at\" AS \"l_deleted_at\", \"c\".\"id\" AS \"c_id\", \"c\".\"foxhole_version\" AS \"c_foxhole_version\", \"c\".\"catalog_version\" AS \"c_catalog_version\", \"c\".\"code_name\" AS \"c_code_name\", \"c\".\"slang\" AS \"c_slang\", \"c\".\"display_name\" AS \"c_display_name\", \"c\".\"faction\" AS \"c_faction\", \"c\".\"category\" AS \"c_category\", \"c\".\"crate_quantity\" AS \"c_crate_quantity\", \"c\".\"shippable_quantity\" AS \"c_shippable_quantity\", \"c\".\"crate_stockpile_maximum\" AS \"c_crate_stockpile_maximum\", \"c\".\"shippable_stockpile_maximum\" AS \"c_shippable_stockpile_maximum\", \"c\".\"data\" AS \"c_data\", \"c\".\"created_at\" AS \"c_created_at\", entry.* FROM \"app\".\"stockpile_entry\" \"entry\" LEFT JOIN \"app\".\"stockpile_log\" \"l\" ON \"l\".\"id\"=\"entry\".\"log_id\"  LEFT JOIN \"app\".\"catalog_expanded\" \"c\" ON \"c\".\"id\"=\"entry\".\"catalog_id\" WHERE \"l\".\"deleted_at\" IS NULL ORDER BY \"entry\".\"stockpile_id\" ASC, \"entry\".\"catalog_id\" ASC, \"entry\".\"created_at\" DESC"]);
        await queryRunner.query(`CREATE VIEW "app"."stockpile_diff" AS SELECT entry1.id current_entry_id, entry2.id previous_entry_id, history.current_log_id, history.previous_log_id, history.stockpile_id, entry1.catalog_id, entry1.guild_id, entry1.war_number, entry1.quantity_crated, entry1.quantity_shippable, entry1.quantity_uncrated, history.created_at, entry1.created_by_sf, history.since_previous, COALESCE(entry1.quantity_crated - entry2.quantity_crated, entry1.quantity_crated) as diff_crated, COALESCE(entry1.quantity_shippable - entry2.quantity_shippable, entry1.quantity_shippable) as diff_shippable, COALESCE(entry1.quantity_uncrated - entry2.quantity_uncrated, entry1.quantity_uncrated) as diff_uncrated FROM (SELECT h1.stockpile_id stockpile_id, h1.log_id current_log_id, h2.log_id previous_log_id, h1.created_at created_at, COALESCE(h1.created_at - h2.created_at, '0'::interval) since_previous   FROM app.stockpile_log_history h1, LATERAL (SELECT * FROM app.stockpile_log_history hh2 WHERE hh2.rank=h1.rank+1 AND hh2.stockpile_id=h1.stockpile_id) h2) history LEFT JOIN app.stockpile_entry entry1 ON entry1.log_id=history.current_log_id  AND entry1.stockpile_id=history.stockpile_id LEFT JOIN app.stockpile_entry entry2  ON entry2.log_id=history.previous_log_id AND entry1.catalog_id=entry2.catalog_id AND entry1.stockpile_id=entry2.stockpile_id`);
        await queryRunner.query(`INSERT INTO "app"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`, ["app","VIEW","stockpile_diff","SELECT entry1.id current_entry_id, entry2.id previous_entry_id, history.current_log_id, history.previous_log_id, history.stockpile_id, entry1.catalog_id, entry1.guild_id, entry1.war_number, entry1.quantity_crated, entry1.quantity_shippable, entry1.quantity_uncrated, history.created_at, entry1.created_by_sf, history.since_previous, COALESCE(entry1.quantity_crated - entry2.quantity_crated, entry1.quantity_crated) as diff_crated, COALESCE(entry1.quantity_shippable - entry2.quantity_shippable, entry1.quantity_shippable) as diff_shippable, COALESCE(entry1.quantity_uncrated - entry2.quantity_uncrated, entry1.quantity_uncrated) as diff_uncrated FROM (SELECT h1.stockpile_id stockpile_id, h1.log_id current_log_id, h2.log_id previous_log_id, h1.created_at created_at, COALESCE(h1.created_at - h2.created_at, '0'::interval) since_previous   FROM app.stockpile_log_history h1, LATERAL (SELECT * FROM app.stockpile_log_history hh2 WHERE hh2.rank=h1.rank+1 AND hh2.stockpile_id=h1.stockpile_id) h2) history LEFT JOIN app.stockpile_entry entry1 ON entry1.log_id=history.current_log_id  AND entry1.stockpile_id=history.stockpile_id LEFT JOIN app.stockpile_entry entry2  ON entry2.log_id=history.previous_log_id AND entry1.catalog_id=entry2.catalog_id AND entry1.stockpile_id=entry2.stockpile_id"]);
    }

}
